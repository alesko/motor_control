template <int port, int pin>
class EBU_AD10:public output<port,pin>
{
public:
    EBU_AD10(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT00:public output<port,pin>
{
public:
    CCU81_OUT00(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD11:public output<port,pin>
{
public:
    EBU_AD11(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT01:public output<port,pin>
{
public:
    CCU81_OUT01(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD12:public output<port,pin>
{
public:
    EBU_AD12(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT02:public output<port,pin>
{
public:
    CCU81_OUT02(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_COLA:public output<port,pin>
{
public:
    LEDTS0_COLA(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD13:public output<port,pin>
{
public:
    EBU_AD13(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD14:public output<port,pin>
{
public:
    EBU_AD14(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SCLKOUT:public output<port,pin>
{
public:
    U1C1_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SCU_EXTCLK:public output<port,pin>
{
public:
    SCU_EXTCLK(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD15:public output<port,pin>
{
public:
    EBU_AD15(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU40_OUT0:public output<port,pin>
{
public:
    CCU40_OUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD16:public output<port,pin>
{
public:
    EBU_AD16(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU40_OUT1:public output<port,pin>
{
public:
    CCU40_OUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DB_ETM_TRACECLK:public output<port,pin>
{
public:
    DB_ETM_TRACECLK(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD17:public output<port,pin>
{
public:
    EBU_AD17(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT20:public output<port,pin>
{
public:
    CCU81_OUT20(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU40_OUT2:public output<port,pin>
{
public:
    CCU40_OUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD18:public output<port,pin>
{
public:
    EBU_AD18(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT21:public output<port,pin>
{
public:
    CCU81_OUT21(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU40_OUT3:public output<port,pin>
{
public:
    CCU40_OUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD19:public output<port,pin>
{
public:
    EBU_AD19(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT23:public output<port,pin>
{
public:
    CCU81_OUT23(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_SCLKOUT:public output<port,pin>
{
public:
    U1C0_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT10:public output<port,pin>
{
public:
    CCU80_OUT10(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT11:public output<port,pin>
{
public:
    CCU80_OUT11(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT12:public output<port,pin>
{
public:
    CCU80_OUT12(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT13:public output<port,pin>
{
public:
    CCU80_OUT13(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX00:public output<port,pin>
{
public:
    VADC_EMUX00(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_RESET:public output<port,pin>
{
public:
    SDMMC_RESET(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_ADV:public output<port,pin>
{
public:
    EBU_ADV(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX01:public output<port,pin>
{
public:
    VADC_EMUX01(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX02:public output<port,pin>
{
public:
    VADC_EMUX02(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT30:public output<port,pin>
{
public:
    CCU80_OUT30(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT31:public output<port,pin>
{
public:
    CCU80_OUT31(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT32:public output<port,pin>
{
public:
    CCU80_OUT32(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT33:public output<port,pin>
{
public:
    CCU80_OUT33(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_CS0:public output<port,pin>
{
public:
    EBU_CS0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_SELO0:public output<port,pin>
{
public:
    U1C0_SELO0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_CS1:public output<port,pin>
{
public:
    EBU_CS1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C1_DOUT0:public output<port,pin>
{
public:
    U2C1_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ETH0_TX_EN:public output<port,pin>
{
public:
    ETH0_TX_EN(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_RD_NWR:public output<port,pin>
{
public:
    EBU_RD_NWR(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DB_ETM_TRACEDATA3:public output<port,pin>
{
public:
    DB_ETM_TRACEDATA3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_SELO0:public output<port,pin>
{
public:
    U0C0_SELO0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_SELO1:public output<port,pin>
{
public:
    U0C0_SELO1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_DOUT0:public output<port,pin>
{
public:
    U1C1_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ETH0_TXD0:public output<port,pin>
{
public:
    ETH0_TXD0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ETH0_TXD1:public output<port,pin>
{
public:
    ETH0_TXD1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_MCLKOUT:public output<port,pin>
{
public:
    U1C1_MCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_MCLK0:public output<port,pin>
{
public:
    DSD_MCLK0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_MCLK1:public output<port,pin>
{
public:
    DSD_MCLK1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C1_DOUT0:public output<port,pin>
{
public:
    U0C1_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_MCLK2:public output<port,pin>
{
public:
    DSD_MCLK2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_MCLK3:public output<port,pin>
{
public:
    DSD_MCLK3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_SELO4:public output<port,pin>
{
public:
    U2C0_SELO4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_RD:public output<port,pin>
{
public:
    EBU_RD(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE0:public output<port,pin>
{
public:
    LEDTS0_LINE0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE1:public output<port,pin>
{
public:
    LEDTS0_LINE1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE2:public output<port,pin>
{
public:
    LEDTS0_LINE2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE3:public output<port,pin>
{
public:
    LEDTS0_LINE3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_SCLKOUT:public output<port,pin>
{
public:
    U2C0_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE4:public output<port,pin>
{
public:
    LEDTS0_LINE4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_CGPWMN:public output<port,pin>
{
public:
    DSD_CGPWMN(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE5:public output<port,pin>
{
public:
    LEDTS0_LINE5(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_LINE6:public output<port,pin>
{
public:
    LEDTS0_LINE6(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DSD_CGPWMP:public output<port,pin>
{
public:
    DSD_CGPWMP(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_HLDA_OUT:public output<port,pin>
{
public:
    EBU_HLDA_OUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C1_SCLKOUT:public output<port,pin>
{
public:
    U2C1_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class WDT_REQUEST:public output<port,pin>
{
public:
    WDT_REQUEST(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT0:public output<port,pin>
{
public:
    SDMMC_DATA_OUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_BC0:public output<port,pin>
{
public:
    EBU_BC0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class DB_TDO_TRACESWO:public output<port,pin>
{
public:
    DB_TDO_TRACESWO(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT1:public output<port,pin>
{
public:
    SDMMC_DATA_OUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_BC1:public output<port,pin>
{
public:
    EBU_BC1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD20:public output<port,pin>
{
public:
    EBU_AD20(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT2:public output<port,pin>
{
public:
    SDMMC_DATA_OUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT10:public output<port,pin>
{
public:
    CCU81_OUT10(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT3:public output<port,pin>
{
public:
    SDMMC_DATA_OUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD21:public output<port,pin>
{
public:
    EBU_AD21(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT11:public output<port,pin>
{
public:
    CCU81_OUT11(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD22:public output<port,pin>
{
public:
    EBU_AD22(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT4:public output<port,pin>
{
public:
    SDMMC_DATA_OUT4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD23:public output<port,pin>
{
public:
    EBU_AD23(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT5:public output<port,pin>
{
public:
    SDMMC_DATA_OUT5(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD24:public output<port,pin>
{
public:
    EBU_AD24(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT6:public output<port,pin>
{
public:
    SDMMC_DATA_OUT6(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT00:public output<port,pin>
{
public:
    CCU80_OUT00(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD25:public output<port,pin>
{
public:
    EBU_AD25(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_DATA_OUT7:public output<port,pin>
{
public:
    SDMMC_DATA_OUT7(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CAN_N0_TXD:public output<port,pin>
{
public:
    CAN_N0_TXD(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT01:public output<port,pin>
{
public:
    CCU80_OUT01(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD26:public output<port,pin>
{
public:
    EBU_AD26(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C1_SCLKOUT:public output<port,pin>
{
public:
    U0C1_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT02:public output<port,pin>
{
public:
    CCU80_OUT02(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_CMD_OUT:public output<port,pin>
{
public:
    SDMMC_CMD_OUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD27:public output<port,pin>
{
public:
    EBU_AD27(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT03:public output<port,pin>
{
public:
    CCU80_OUT03(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD28:public output<port,pin>
{
public:
    EBU_AD28(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT32:public output<port,pin>
{
public:
    CCU81_OUT32(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ERU1_PDOUT0:public output<port,pin>
{
public:
    ERU1_PDOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU81_OUT33:public output<port,pin>
{
public:
    CCU81_OUT33(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ERU1_PDOUT1:public output<port,pin>
{
public:
    ERU1_PDOUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ERU1_PDOUT2:public output<port,pin>
{
public:
    ERU1_PDOUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT20:public output<port,pin>
{
public:
    CCU80_OUT20(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT21:public output<port,pin>
{
public:
    CCU80_OUT21(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_SCLKOUT:public output<port,pin>
{
public:
    U0C0_SCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ERU1_PDOUT3:public output<port,pin>
{
public:
    ERU1_PDOUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU42_OUT0:public output<port,pin>
{
public:
    CCU42_OUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT22:public output<port,pin>
{
public:
    CCU80_OUT22(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_CLK_OUT:public output<port,pin>
{
public:
    SDMMC_CLK_OUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU42_OUT1:public output<port,pin>
{
public:
    CCU42_OUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU80_OUT23:public output<port,pin>
{
public:
    CCU80_OUT23(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU42_OUT2:public output<port,pin>
{
public:
    CCU42_OUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX10:public output<port,pin>
{
public:
    VADC_EMUX10(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU42_OUT3:public output<port,pin>
{
public:
    CCU42_OUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX11:public output<port,pin>
{
public:
    VADC_EMUX11(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class VADC_EMUX12:public output<port,pin>
{
public:
    VADC_EMUX12(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C1_SELO0:public output<port,pin>
{
public:
    U0C1_SELO0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ETH0_MDC:public output<port,pin>
{
public:
    ETH0_MDC(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C1_SELO2:public output<port,pin>
{
public:
    U0C1_SELO2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C1_SELO3:public output<port,pin>
{
public:
    U0C1_SELO3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C1_SELO0:public output<port,pin>
{
public:
    U2C1_SELO0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class _:public output<port,pin>
{
public:
    _(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C1_MCLKOUT:public output<port,pin>
{
public:
    U2C1_MCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_DOUT0:public output<port,pin>
{
public:
    U0C0_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_DOUT1:public output<port,pin>
{
public:
    U0C0_DOUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CAN_N1_TXD:public output<port,pin>
{
public:
    CAN_N1_TXD(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_DOUT2:public output<port,pin>
{
public:
    U0C0_DOUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_DOUT3:public output<port,pin>
{
public:
    U0C0_DOUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_DOUT0:public output<port,pin>
{
public:
    U2C0_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SELO0:public output<port,pin>
{
public:
    U1C1_SELO0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_DOUT1:public output<port,pin>
{
public:
    U2C0_DOUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN0:public output<port,pin>
{
public:
    LEDTS0_TSIN0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SELO1:public output<port,pin>
{
public:
    U1C1_SELO1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_DOUT2:public output<port,pin>
{
public:
    U2C0_DOUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN1:public output<port,pin>
{
public:
    LEDTS0_TSIN1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class ETH0_MDO:public output<port,pin>
{
public:
    ETH0_MDO(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SELO2:public output<port,pin>
{
public:
    U1C1_SELO2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U2C0_DOUT3:public output<port,pin>
{
public:
    U2C0_DOUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN2:public output<port,pin>
{
public:
    LEDTS0_TSIN2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SELO3:public output<port,pin>
{
public:
    U1C1_SELO3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN3:public output<port,pin>
{
public:
    LEDTS0_TSIN3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C1_SELO4:public output<port,pin>
{
public:
    U1C1_SELO4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN4:public output<port,pin>
{
public:
    LEDTS0_TSIN4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN5:public output<port,pin>
{
public:
    LEDTS0_TSIN5(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_BREQ:public output<port,pin>
{
public:
    EBU_BREQ(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_DOUT0:public output<port,pin>
{
public:
    U1C0_DOUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_TSIN6:public output<port,pin>
{
public:
    LEDTS0_TSIN6(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_DOUT1:public output<port,pin>
{
public:
    U1C0_DOUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_DOUT2:public output<port,pin>
{
public:
    U1C0_DOUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U1C0_DOUT3:public output<port,pin>
{
public:
    U1C0_DOUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class USB_DRIVEVBUS:public output<port,pin>
{
public:
    USB_DRIVEVBUS(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD0:public output<port,pin>
{
public:
    EBU_AD0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_BUS_POWER:public output<port,pin>
{
public:
    SDMMC_BUS_POWER(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD1:public output<port,pin>
{
public:
    EBU_AD1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU41_OUT0:public output<port,pin>
{
public:
    CCU41_OUT0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD2:public output<port,pin>
{
public:
    EBU_AD2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU41_OUT1:public output<port,pin>
{
public:
    CCU41_OUT1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD3:public output<port,pin>
{
public:
    EBU_AD3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU41_OUT2:public output<port,pin>
{
public:
    CCU41_OUT2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class U0C0_MCLKOUT:public output<port,pin>
{
public:
    U0C0_MCLKOUT(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD4:public output<port,pin>
{
public:
    EBU_AD4(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class SDMMC_LED:public output<port,pin>
{
public:
    SDMMC_LED(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CCU41_OUT3:public output<port,pin>
{
public:
    CCU41_OUT3(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD5:public output<port,pin>
{
public:
    EBU_AD5(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD6:public output<port,pin>
{
public:
    EBU_AD6(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD7:public output<port,pin>
{
public:
    EBU_AD7(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class CAN_N2_TXD:public output<port,pin>
{
public:
    CAN_N2_TXD(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_COL0:public output<port,pin>
{
public:
    LEDTS0_COL0(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD8:public output<port,pin>
{
public:
    EBU_AD8(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_COL1:public output<port,pin>
{
public:
    LEDTS0_COL1(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class EBU_AD9:public output<port,pin>
{
public:
    EBU_AD9(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_COL2:public output<port,pin>
{
public:
    LEDTS0_COL2(void) { static_assert(port<0,"Illegal pin");}
};

template <int port, int pin>
class LEDTS0_COL3:public output<port,pin>
{
public:
    LEDTS0_COL3(void) { static_assert(port<0,"Illegal pin");}
};

template<>
inline U1C1_SELO0<0,12>::U1C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_12_AF_U1C1_SELO0));
}
template<>
inline U0C1_SCLKOUT<2,4>::U0C1_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_4_AF_U0C1_SCLKOUT));
}
template<>
inline DSD_CGPWMP<1,1>::DSD_CGPWMP(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_1_AF_DSD_CGPWMP));
}
template<>
inline CAN_N0_TXD<3,2>::CAN_N0_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_2_AF_CAN_N0_TXD));
}
template<>
inline LEDTS0_LINE4<2,8>::LEDTS0_LINE4(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_8_AF_LEDTS0_LINE4));
}
template<>
inline ETH0_MDC<0,10>::ETH0_MDC(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_10_AF_ETH0_MDC));
}
template<>
inline CCU81_OUT10<1,5>::CCU81_OUT10(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_5_AF_CCU81_OUT10));
}
template<>
inline U0C0_SELO0<1,11>::U0C0_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_11_AF_U0C0_SELO0));
}
template<>
inline U2C0_DOUT0<5,0>::U2C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_0_AF_U2C0_DOUT0));
}
template<>
inline U0C1_SELO0<3,1>::U0C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_1_AF_U0C1_SELO0));
}
template<>
inline CCU81_OUT11<2,1>::CCU81_OUT11(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_1_AF_CCU81_OUT11));
}
template<>
inline CCU80_OUT03<2,7>::CCU80_OUT03(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_7_AF_CCU80_OUT03));
}
template<>
inline CCU80_OUT02<0,10>::CCU80_OUT02(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_10_AF_CCU80_OUT02));
}
template<>
inline CCU81_OUT32<5,1>::CCU81_OUT32(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_1_AF_CCU81_OUT32));
}
template<>
inline CCU81_OUT20<1,4>::CCU81_OUT20(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_4_AF_CCU81_OUT20));
}
template<>
inline CCU80_OUT10<0,4>::CCU80_OUT10(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_4_AF_CCU80_OUT10));
}
template<>
inline CCU41_OUT0<2,5>::CCU41_OUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_5_AF_CCU41_OUT0));
}
template<>
inline CCU81_OUT21<2,0>::CCU81_OUT21(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_0_AF_CCU81_OUT21));
}
template<>
inline CCU80_OUT13<2,6>::CCU80_OUT13(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_6_AF_CCU80_OUT13));
}
template<>
inline CCU81_OUT01<2,2>::CCU81_OUT01(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_2_AF_CCU81_OUT01));
}
template<>
inline CAN_N2_TXD<1,9>::CAN_N2_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_9_AF_CAN_N2_TXD));
}
template<>
inline ETH0_TXD1<0,6>::ETH0_TXD1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_6_AF_ETH0_TXD1));
}
template<>
inline U1C1_SELO0<0,9>::U1C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_9_AF_U1C1_SELO0));
}
template<>
inline CCU80_OUT23<1,5>::CCU80_OUT23(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_5_AF_CCU80_OUT23));
}
template<>
inline CCU80_OUT20<0,3>::CCU80_OUT20(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_3_AF_CCU80_OUT20));
}
template<>
inline DSD_CGPWMP<2,1>::DSD_CGPWMP(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_1_AF_DSD_CGPWMP));
}
template<>
inline CCU42_OUT1<3,5>::CCU42_OUT1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_5_AF_CCU42_OUT1));
}
template<>
inline LEDTS0_COL3<2,6>::LEDTS0_COL3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_6_AF_LEDTS0_COL3));
}
template<>
inline CCU80_OUT00<0,5>::CCU80_OUT00(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_5_AF_CCU80_OUT00));
}
template<>
inline U1C1_SCLKOUT<0,10>::U1C1_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_10_AF_U1C1_SCLKOUT));
}
template<>
inline CCU81_OUT23<5,2>::CCU81_OUT23(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_2_AF_CCU81_OUT23));
}
template<>
inline LEDTS0_LINE5<2,9>::LEDTS0_LINE5(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_9_AF_LEDTS0_LINE5));
}
template<>
inline CCU41_OUT2<2,3>::CCU41_OUT2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_3_AF_CCU41_OUT2));
}
template<>
inline DSD_MCLK1<1,8>::DSD_MCLK1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_8_AF_DSD_MCLK1));
}
template<>
inline U0C1_DOUT0<2,5>::U0C1_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_5_AF_U0C1_DOUT0));
}
template<>
inline U0C0_SCLKOUT<1,1>::U0C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_1_AF_U0C0_SCLKOUT));
}
template<>
inline CCU80_OUT22<2,9>::CCU80_OUT22(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_9_AF_CCU80_OUT22));
}
template<>
inline LEDTS0_COL1<2,0>::LEDTS0_COL1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_0_AF_LEDTS0_COL1));
}
template<>
inline LEDTS0_LINE6<2,15>::LEDTS0_LINE6(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_15_AF_LEDTS0_LINE6));
}
template<>
inline CCU80_OUT33<1,4>::CCU80_OUT33(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_4_AF_CCU80_OUT33));
}
template<>
inline CAN_N1_TXD<1,5>::CAN_N1_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_5_AF_CAN_N1_TXD));
}
template<>
inline USB_DRIVEVBUS<3,2>::USB_DRIVEVBUS(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_2_AF_USB_DRIVEVBUS));
}
template<>
inline ETH0_TX_EN<2,5>::ETH0_TX_EN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_5_AF_ETH0_TX_EN));
}
template<>
inline CCU80_OUT30<0,6>::CCU80_OUT30(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_6_AF_CCU80_OUT30));
}
template<>
inline U2C1_SELO0<4,1>::U2C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P4_1_AF_U2C1_SELO0));
}
template<>
inline LEDTS0_LINE2<2,4>::LEDTS0_LINE2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_4_AF_LEDTS0_LINE2));
}
template<>
inline U0C0_SCLKOUT<1,6>::U0C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_6_AF_U0C0_SCLKOUT));
}
template<>
inline CCU40_OUT0<1,3>::CCU40_OUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_3_AF_CCU40_OUT0));
}
template<>
inline CCU42_OUT3<3,3>::CCU42_OUT3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_3_AF_CCU42_OUT3));
}
template<>
inline CCU80_OUT32<2,8>::CCU80_OUT32(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_8_AF_CCU80_OUT32));
}
template<>
inline U0C0_SCLKOUT<0,8>::U0C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_8_AF_U0C0_SCLKOUT));
}
template<>
inline CCU80_OUT31<0,11>::CCU80_OUT31(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_11_AF_CCU80_OUT31));
}
template<>
inline LEDTS0_COL2<0,0>::LEDTS0_COL2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_0_AF_LEDTS0_COL2));
}
template<>
inline ETH0_TXD1<1,14>::ETH0_TXD1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_14_AF_ETH0_TXD1));
}
template<>
inline WDT_REQUEST<1,4>::WDT_REQUEST(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_4_AF_WDT_REQUEST));
}
template<>
inline U1C0_SELO0<0,6>::U1C0_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_6_AF_U1C0_SELO0));
}
template<>
inline LEDTS0_COLA<3,2>::LEDTS0_COLA(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_2_AF_LEDTS0_COLA));
}
template<>
inline CAN_N1_TXD<2,7>::CAN_N1_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_7_AF_CAN_N1_TXD));
}
template<>
inline U2C0_SCLKOUT<5,2>::U2C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_2_AF_U2C0_SCLKOUT));
}
template<>
inline ERU1_PDOUT1<1,2>::ERU1_PDOUT1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_2_AF_ERU1_PDOUT1));
}
template<>
inline CCU40_OUT2<1,1>::CCU40_OUT2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_1_AF_CCU40_OUT2));
}
template<>
inline U1C0_DOUT0<0,5>::U1C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_5_AF_U1C0_DOUT0));
}
template<>
inline USB_DRIVEVBUS<0,1>::USB_DRIVEVBUS(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_1_AF_USB_DRIVEVBUS));
}
template<>
inline DSD_CGPWMN<5,0>::DSD_CGPWMN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_0_AF_DSD_CGPWMN));
}
template<>
inline U0C1_SELO0<4,1>::U0C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P4_1_AF_U0C1_SELO0));
}
template<>
inline ETH0_TXD1<2,9>::ETH0_TXD1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_9_AF_ETH0_TXD1));
}
template<>
inline VADC_EMUX01<2,3>::VADC_EMUX01(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_3_AF_VADC_EMUX01));
}
template<>
inline SCU_EXTCLK<1,15>::SCU_EXTCLK(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_15_AF_SCU_EXTCLK));
}
template<>
inline U2C1_DOUT0<3,5>::U2C1_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_5_AF_U2C1_DOUT0));
}
template<>
inline U1C0_SCLKOUT<0,11>::U1C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_11_AF_U1C0_SCLKOUT));
}
template<>
inline ETH0_TX_EN<0,4>::ETH0_TX_EN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_4_AF_ETH0_TX_EN));
}
template<>
inline CCU81_OUT00<1,15>::CCU81_OUT00(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_15_AF_CCU81_OUT00));
}
template<>
inline ETH0_TX_EN<1,12>::ETH0_TX_EN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_12_AF_ETH0_TX_EN));
}
template<>
inline LEDTS0_LINE3<2,5>::LEDTS0_LINE3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_5_AF_LEDTS0_LINE3));
}
template<>
inline ERU1_PDOUT3<1,0>::ERU1_PDOUT3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_0_AF_ERU1_PDOUT3));
}
template<>
inline DSD_MCLK2<1,15>::DSD_MCLK2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_15_AF_DSD_MCLK2));
}
template<>
inline U2C1_MCLKOUT<3,4>::U2C1_MCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_4_AF_U2C1_MCLKOUT));
}
template<>
inline U1C1_SELO4<3,6>::U1C1_SELO4(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_6_AF_U1C1_SELO4));
}
template<>
inline CCU81_OUT10<1,14>::CCU81_OUT10(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_14_AF_CCU81_OUT10));
}
template<>
inline U0C0_SELO1<1,8>::U0C0_SELO1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_8_AF_U0C0_SELO1));
}
template<>
inline U0C0_SCLKOUT<1,10>::U0C0_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_10_AF_U0C0_SCLKOUT));
}
template<>
inline DSD_MCLK1<4,0>::DSD_MCLK1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P4_0_AF_DSD_MCLK1));
}
template<>
inline U0C1_DOUT0<3,5>::U0C1_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_5_AF_U0C1_DOUT0));
}
template<>
inline U1C1_SELO2<3,4>::U1C1_SELO2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_4_AF_U1C1_SELO2));
}
template<>
inline U0C1_SELO3<1,13>::U0C1_SELO3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_13_AF_U0C1_SELO3));
}
template<>
inline U0C1_SCLKOUT<3,0>::U0C1_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_0_AF_U0C1_SCLKOUT));
}
template<>
inline CCU81_OUT20<1,13>::CCU81_OUT20(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_13_AF_CCU81_OUT20));
}
template<>
inline VADC_EMUX10<2,10>::VADC_EMUX10(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_10_AF_VADC_EMUX10));
}
template<>
inline U2C1_SELO0<3,0>::U2C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_0_AF_U2C1_SELO0));
}
template<>
inline U0C0_DOUT0<5,1>::U0C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_1_AF_U0C0_DOUT0));
}
template<>
inline CCU42_OUT0<3,6>::CCU42_OUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_6_AF_CCU42_OUT0));
}
template<>
inline VADC_EMUX11<2,14>::VADC_EMUX11(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_14_AF_VADC_EMUX11));
}
template<>
inline ETH0_MDC<1,10>::ETH0_MDC(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_10_AF_ETH0_MDC));
}
template<>
inline DSD_CGPWMN<1,0>::DSD_CGPWMN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_0_AF_DSD_CGPWMN));
}
template<>
inline U0C0_DOUT0<1,7>::U0C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_7_AF_U0C0_DOUT0));
}
template<>
inline DSD_MCLK3<3,4>::DSD_MCLK3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_4_AF_DSD_MCLK3));
}
template<>
inline CAN_N0_TXD<0,0>::CAN_N0_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_0_AF_CAN_N0_TXD));
}
template<>
inline U2C1_SCLKOUT<3,6>::U2C1_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_6_AF_U2C1_SCLKOUT));
}
template<>
inline CCU40_OUT3<0,12>::CCU40_OUT3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_12_AF_CCU40_OUT3));
}
template<>
inline ETH0_MDC<2,7>::ETH0_MDC(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_7_AF_ETH0_MDC));
}
template<>
inline CAN_N0_TXD<1,4>::CAN_N0_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_4_AF_CAN_N0_TXD));
}
template<>
inline CCU81_OUT02<5,7>::CCU81_OUT02(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_7_AF_CCU81_OUT02));
}
template<>
inline CCU80_OUT12<0,9>::CCU80_OUT12(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_9_AF_CCU80_OUT12));
}
template<>
inline U0C0_DOUT0<1,5>::U0C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_5_AF_U0C0_DOUT0));
}
template<>
inline CAN_N1_TXD<1,12>::CAN_N1_TXD(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_12_AF_CAN_N1_TXD));
}
template<>
inline DSD_MCLK0<1,9>::DSD_MCLK0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_9_AF_DSD_MCLK0));
}
template<>
inline LEDTS0_COL0<0,9>::LEDTS0_COL0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_9_AF_LEDTS0_COL0));
}
template<>
inline CCU81_OUT33<5,0>::CCU81_OUT33(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_0_AF_CCU81_OUT33));
}
template<>
inline LEDTS0_COL2<2,7>::LEDTS0_COL2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_7_AF_LEDTS0_COL2));
}
template<>
inline CCU80_OUT01<0,2>::CCU80_OUT01(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_2_AF_CCU80_OUT01));
}
template<>
inline CCU41_OUT1<2,4>::CCU41_OUT1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_4_AF_CCU41_OUT1));
}
template<>
inline LEDTS0_COL1<0,10>::LEDTS0_COL1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_10_AF_LEDTS0_COL1));
}
template<>
inline U1C1_MCLKOUT<4,1>::U1C1_MCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P4_1_AF_U1C1_MCLKOUT));
}
template<>
inline LEDTS0_COL0<2,1>::LEDTS0_COL0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_1_AF_LEDTS0_COL0));
}
template<>
inline U2C0_SELO4<2,6>::U2C0_SELO4(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_6_AF_U2C0_SELO4));
}
template<>
inline DSD_CGPWMN<2,0>::DSD_CGPWMN(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_0_AF_DSD_CGPWMN));
}
template<>
inline WDT_REQUEST<0,7>::WDT_REQUEST(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_7_AF_WDT_REQUEST));
}
template<>
inline SCU_EXTCLK<0,8>::SCU_EXTCLK(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_8_AF_SCU_EXTCLK));
}
template<>
inline CCU80_OUT11<0,1>::CCU80_OUT11(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_1_AF_CCU80_OUT11));
}
template<>
inline CCU80_OUT11<2,15>::CCU80_OUT11(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_15_AF_CCU80_OUT11));
}
template<>
inline CCU42_OUT2<3,4>::CCU42_OUT2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_4_AF_CCU42_OUT2));
}
template<>
inline CCU41_OUT3<2,2>::CCU41_OUT3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_2_AF_CCU41_OUT3));
}
template<>
inline LEDTS0_COLA<5,7>::LEDTS0_COLA(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_7_AF_LEDTS0_COLA));
}
template<>
inline LEDTS0_COL3<0,1>::LEDTS0_COL3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_1_AF_LEDTS0_COL3));
}
template<>
inline CCU80_OUT21<0,0>::CCU80_OUT21(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_0_AF_CCU80_OUT21));
}
template<>
inline CCU80_OUT21<2,14>::CCU80_OUT21(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_14_AF_CCU80_OUT21));
}
template<>
inline U0C1_SELO0<2,3>::U0C1_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_3_AF_U0C1_SELO0));
}
template<>
inline U0C0_SELO0<1,0>::U0C0_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_0_AF_U0C0_SELO0));
}
template<>
inline ERU1_PDOUT0<1,3>::ERU1_PDOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_3_AF_ERU1_PDOUT0));
}
template<>
inline CCU40_OUT1<1,2>::CCU40_OUT1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_2_AF_CCU40_OUT1));
}
template<>
inline U0C1_SCLKOUT<3,6>::U0C1_SCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_6_AF_U0C1_SCLKOUT));
}
template<>
inline CCU42_OUT0<3,0>::CCU42_OUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_0_AF_CCU42_OUT0));
}
template<>
inline ETH0_TXD0<0,5>::ETH0_TXD0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_5_AF_ETH0_TXD0));
}
template<>
inline VADC_EMUX02<2,4>::VADC_EMUX02(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_4_AF_VADC_EMUX02));
}
template<>
inline ETH0_TXD0<1,13>::ETH0_TXD0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_13_AF_ETH0_TXD0));
}
template<>
inline U0C0_MCLKOUT<1,3>::U0C0_MCLKOUT(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_3_AF_U0C0_MCLKOUT));
}
template<>
inline U0C0_SELO0<0,7>::U0C0_SELO0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_7_AF_U0C0_SELO0));
}
template<>
inline DSD_CGPWMP<5,1>::DSD_CGPWMP(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P5_1_AF_DSD_CGPWMP));
}
template<>
inline LEDTS0_LINE0<2,2>::LEDTS0_LINE0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_2_AF_LEDTS0_LINE0));
}
template<>
inline CCU81_OUT01<1,12>::CCU81_OUT01(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_12_AF_CCU81_OUT01));
}
template<>
inline ERU1_PDOUT2<1,1>::ERU1_PDOUT2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_1_AF_ERU1_PDOUT2));
}
template<>
inline CCU40_OUT3<1,0>::CCU40_OUT3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_0_AF_CCU40_OUT3));
}
template<>
inline VADC_EMUX00<2,2>::VADC_EMUX00(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_2_AF_VADC_EMUX00));
}
template<>
inline DSD_MCLK2<1,7>::DSD_MCLK2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_7_AF_DSD_MCLK2));
}
template<>
inline CCU81_OUT11<1,11>::CCU81_OUT11(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_11_AF_CCU81_OUT11));
}
template<>
inline DSD_MCLK0<4,1>::DSD_MCLK0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P4_1_AF_DSD_MCLK0));
}
template<>
inline U0C1_SELO2<1,14>::U0C1_SELO2(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_14_AF_U0C1_SELO2));
}
template<>
inline U1C1_SELO3<3,5>::U1C1_SELO3(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_5_AF_U1C1_SELO3));
}
template<>
inline U1C0_DOUT0<2,14>::U1C0_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_14_AF_U1C0_DOUT0));
}
template<>
inline CCU81_OUT21<1,10>::CCU81_OUT21(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P1_10_AF_CCU81_OUT21));
}
template<>
inline LEDTS0_LINE1<2,3>::LEDTS0_LINE1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_3_AF_LEDTS0_LINE1));
}
template<>
inline U1C1_SELO1<3,3>::U1C1_SELO1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P3_3_AF_U1C1_SELO1));
}
template<>
inline U1C1_SELO1<0,2>::U1C1_SELO1(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_2_AF_U1C1_SELO1));
}
template<>
inline U1C1_DOUT0<0,1>::U1C1_DOUT0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P0_1_AF_U1C1_DOUT0));
}
template<>
inline VADC_EMUX12<2,15>::VADC_EMUX12(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_15_AF_VADC_EMUX12));
}
template<>
inline ETH0_TXD0<2,8>::ETH0_TXD0(void)
{
    set(XMC_GPIO_MODE_t(XMC_GPIO_MODE_OUTPUT_PUSH_PULL|P2_8_AF_ETH0_TXD0));
}
template<>
inline EBU_AD8<4,0>::EBU_AD8(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U1C0_DOUT3<0,2>::U1C0_DOUT3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_DATA_OUT1<1,6>::SDMMC_DATA_OUT1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD12<1,8>::EBU_AD12(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD6<0,7>::EBU_AD6(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD17<1,13>::EBU_AD17(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD26<2,8>::EBU_AD26(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD28<2,10>::EBU_AD28(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline DB_ETM_TRACEDATA3<2,10>::DB_ETM_TRACEDATA3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD25<2,5>::EBU_AD25(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD22<2,2>::EBU_AD22(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD14<1,2>::EBU_AD14(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline SDMMC_DATA_OUT6<1,12>::SDMMC_DATA_OUT6(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline U0C0_DOUT1<1,4>::U0C0_DOUT1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD0<0,2>::EBU_AD0(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD3<0,5>::EBU_AD3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD7<0,8>::EBU_AD7(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_RD_NWR<3,1>::EBU_RD_NWR(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN0<2,2>::LEDTS0_TSIN0(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD2<0,4>::EBU_AD2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U0C0_DOUT3<1,2>::U0C0_DOUT3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline DB_TDO_TRACESWO<2,1>::DB_TDO_TRACESWO(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_RESET<0,11>::SDMMC_RESET(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD1<0,3>::EBU_AD1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U2C0_DOUT2<5,7>::U2C0_DOUT2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline U2C0_DOUT3<2,6>::U2C0_DOUT3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_DATA_OUT4<1,8>::SDMMC_DATA_OUT4(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_BC1<2,15>::EBU_BC1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN1<2,3>::LEDTS0_TSIN1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_BC0<2,14>::EBU_BC0(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD5<3,6>::EBU_AD5(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD10<1,6>::EBU_AD10(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U1C0_DOUT2<0,3>::U1C0_DOUT2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD13<1,9>::EBU_AD13(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD18<1,14>::EBU_AD18(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_ADV<0,6>::EBU_ADV(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline SDMMC_DATA_OUT3<4,1>::SDMMC_DATA_OUT3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_BUS_POWER<3,4>::SDMMC_BUS_POWER(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD27<2,9>::EBU_AD27(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD4<3,5>::EBU_AD4(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN4<2,8>::LEDTS0_TSIN4(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD23<2,3>::EBU_AD23(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline ETH0_MDO<0,9>::ETH0_MDO(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_CMD_OUT<3,5>::SDMMC_CMD_OUT(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline ETH0_MDO<2,0>::ETH0_MDO(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_CS1<0,9>::EBU_CS1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_RD<3,0>::EBU_RD(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline SDMMC_CLK_OUT<3,6>::SDMMC_CLK_OUT(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline U2C0_DOUT1<5,1>::U2C0_DOUT1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD20<2,0>::EBU_AD20(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN5<2,9>::LEDTS0_TSIN5(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD15<1,3>::EBU_AD15(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN6<2,15>::LEDTS0_TSIN6(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline LEDTS0_TSIN2<2,4>::LEDTS0_TSIN2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_DATA_OUT2<1,7>::SDMMC_DATA_OUT2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline DB_ETM_TRACECLK<2,14>::DB_ETM_TRACECLK(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_HLDA_OUT<0,12>::EBU_HLDA_OUT(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_BREQ<0,11>::EBU_BREQ(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U0C0_DOUT2<1,3>::U0C0_DOUT2(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_DATA_OUT0<4,0>::SDMMC_DATA_OUT0(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_CS0<3,2>::EBU_CS0(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline LEDTS0_TSIN3<2,5>::LEDTS0_TSIN3(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD11<1,7>::EBU_AD11(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD19<1,15>::EBU_AD19(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD16<1,12>::EBU_AD16(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline SDMMC_LED<3,3>::SDMMC_LED(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline SDMMC_DATA_OUT7<1,13>::SDMMC_DATA_OUT7(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD24<2,4>::EBU_AD24(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline EBU_AD21<2,1>::EBU_AD21(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline U1C0_DOUT1<0,4>::U1C0_DOUT1(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline ETH0_MDO<1,11>::ETH0_MDO(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
template<>
inline EBU_AD9<4,1>::EBU_AD9(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL2);
}
template<>
inline SDMMC_DATA_OUT5<1,9>::SDMMC_DATA_OUT5(void)
{
    set(XMC_GPIO_HWCTRL_PERIPHERAL1);
}
